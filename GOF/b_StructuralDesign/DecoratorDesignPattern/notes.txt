Decorator Pattern →
🔹 Dynamically adds behavior without modifying the original class.
🔹 Uses composition instead of inheritance for flexibility.

Example:
IMessage message = new HtmlMessage(new EncryptedMessage(new TextMessage("Hello")));  
Console.WriteLine(message.GetContent()); // <html>[Encrypted] Hello</html>  

✔️ Key Idea: Modifies object behavior dynamically using stackable decorators.


-------------------------------------------------------------------

✅ Interface (IMessage) → Abstract Class (MessageDecorator) → Concrete Class (EncryptedMessage, HtmlMessage)

✔ The interface defines behavior.
✔ The abstract class provides a base for decorators.
✔ The concrete classes extend functionality dynamically.