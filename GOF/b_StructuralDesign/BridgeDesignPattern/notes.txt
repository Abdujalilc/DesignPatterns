Bridge Pattern ‚Üí
üîπ Decouples abstraction from implementation for flexibility
üîπ Enables independent development of both sides

Example:
Device tv = new TV(new BasicRemote());  
tv.Operate(); // Uses remote without being tightly coupled  

‚úîÔ∏è Key Idea: Separates interface from implementation to allow easy extension!

-----------------------------------------------------

–ü–∞—Ç—Ç–µ—Ä–Ω –ú–æ—Å—Ç ‚Üí
üîπ –û—Ç–¥–µ–ª—è–µ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏—é –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –≥–∏–±–∫–æ—Å—Ç–∏
üîπ –ü–æ–∑–≤–æ–ª—è–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã

–ü—Ä–∏–º–µ—Ä:
Device tv = new TV(new BasicRemote());  
tv.Operate(); // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—É–ª—å—Ç –±–µ–∑ –∂–µ—Å—Ç–∫–æ–π —Å–≤—è–∑–∏  

‚úîÔ∏è –ö–ª—é—á–µ–≤–∞—è –∏–¥–µ—è: –†–∞–∑–¥–µ–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é, —É–ø—Ä–æ—â–∞—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ!